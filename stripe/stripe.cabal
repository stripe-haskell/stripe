name:                stripe
version:             2.0.0
synopsis:            Stripe API for Haskell
license:             MIT
license-file:        LICENSE
author:              David Johnson, Jeremy Shaw
maintainer:          djohnson.m@gmail.com
copyright:           Copyright (c) 2015 David M. Johnson
homepage:            https://github.com/stripe-haskell/stripe
bug-reports:         https://github.com/stripe-haskell/stripe/issues
category:            Web
build-type:          Simple
cabal-version:       >=1.10
Description:
    .
    <<https://stripe.com/img/navigation/logo@2x.png>>
    .
    [Stripe API Coverage - <https://stripe.com/docs/api>]
    Most common Stripe commands are supported,
    including but not limited to Charges, Refunds, Customers, Cards,
    Subscriptions, Plans, Coupons, Discounts, Invoices, Invoice Items,
    Disputes, Transfers, Recipients, Application Fees, Application Fee Refunds,
    Account, Balance, Events and Tokens.
    .
    [Haddock Coverage]
    All code written for this library is documented to completion with the haddock documentation tool
    .
    [100+ Hspec Tests] Thoroughly unit-tested with hspec.
    All API commands are unit-tested before inclusion into the API (see the stripe-tests package).
    To run the tests, perform the following:
    .
    >  cabal clean && cabal configure --enable-tests && cabal build tests && dist/build/tests/tests -- You will be prompted to enter your *TEST* key
    .

    [Pagination - <https://stripe.com/docs/api#pagination>]
    Pagination is possible on all API calls that return a JSON array.
    Any API call that returns a `StripeList` is eligible for pagination.
    To use in practice do the following:
    .
    > {-# LANGUAGE OverloadedStrings #-}
    > import Web.Stripe
    > import Web.Stripe.Customer
    >
    > main :: IO ()
    > main = do
    >   let config = StripeConfig (StripeKey "secret key")
    >   result <- stripe config $ getCustomers
    >                               -&- (Limit 30) -- Defaults to 10 if Nothing, 100 is Max
    >                               -&- (StartingAfter $ CustomerId "customer_id0")
    >                               -&- (EndingBefore $ CustomerId "customer_id30")
    >   case result of
    >     Right stripelist -> print (list stripelist :: [Customer])
    >     Left stripeError -> print stripeError
    >
    .
    [Versioning - <https://stripe.com/docs/api#versioning>]
    All versioning is hard-coded (for safety).
    Stripe API versions specified in the HTTP headers of Stripe requests take precedence
    over the API version specified in your Stripe Dashboard. In an attempt to ensure
    API consistency and correct parsing of returned JSON, all Stripe versions are hard-coded, and are
    inaccessible to the end-users of this library. When a new Stripe API version is released
    this library will increment the hard-coded API version.
    .

    [Expansion - <https://stripe.com/docs/api#expansion>] Object expansion is supported on Stripe objects eligible for expansion though the `ExpandParams` type.
    Object expansion allows normal Stripe API calls to return expanded objects inside of other objects.
    For example, a `Customer` object contains a Card ID hash on the default_card field.
    This default_card hash can be expanded into a full `Card` object inside a `Customer` object.
    As an example:
    .
    > {-# LANGUAGE OverloadedStrings #-}
    > import Web.Stripe
    > import Web.Stripe.Customer
    >
    > main :: IO ()
    > main = do
    >   let config = StripeConfig (StripeKey "secret key")
    >   result <- stripe config $ getCustomerExpandable
    >                                  (CustomerId "customerid")
    >                                  -&- ExpandParams ["default_card"]
    >   case result of
    >     Right customer   -> print (defaultCard customer) -- Will be an `Expanded` `Card`
    >     Left stripeError -> print stripeError
    >
    .

    [MetaData - <https://stripe.com/docs/api#metadata>]
    Stripe objects allow the embedding of arbitrary metadata.
    Any Stripe object that supports the embedding of metadata is available via this API.
    As an example:
    .
    > {-# LANGUAGE OverloadedStrings #-}
    > import Web.Stripe
    > import Web.Stripe.Coupon
    >
    > main :: IO ()
    > main = do
    >   let config = StripeConfig (StripeKey "secret key")
    >   result <- stripe config $ updateCoupon (CouponId "couponid")
                                   -&- MetaData [("key1", "value2"), ("key2", "value2")]
    >   case result of
    >     Right coupon     -> print $ couponMetaData coupon
    >     Left stripeError -> print stripeError
    .
    [Issues - <https://github.com/stripe-haskell/stripe/issues>]
    Any API recommendations or bugs can be reported on the GitHub issue tracker.
    Pull requests welcome!
    .

library
  hs-source-dirs:      src src-http-streams
  build-depends:       base                >= 4   && < 5,
                       stripe-core         >= 2.0 && < 2.1,
                       stripe-http-streams >= 2.0 && < 2.1

  default-language:    Haskell2010
  exposed-modules:
                       Web.Stripe
                       Web.Stripe.Client.Stripe

  ghc-options:        -Wall

source-repository head
  type:     git
  location: git://github.com/stripe-haskell/stripe.git
  subdir: stripe
